<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="img_user.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        FJeU9H/+EuvwaCtrYQAAAABJRU5ErkJggg==
</value>
  </data>
</root>